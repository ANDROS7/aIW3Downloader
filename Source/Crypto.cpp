// Hedgehogscience.com

#define LTM_DESC
#include "..\Include\Crypto.h"
#include "..\Include\libtomcrypt\tomcrypt.h"


const unsigned char np_key[] =
{
	0xA6, 0xAD, 0xAC, 0x9C, 0x46, 0xF1, 0x03, 0xDD, 0x5B, 0x6A, 0x2A,
	0x3E, 0x13, 0x33, 0x3C, 0xC1, 0x29, 0x9B, 0x6D, 0xCF, 0x54, 0xC0,
	0x43, 0x1C, 0xFA, 0xDE, 0xDA, 0xBA, 0xB4, 0xF4, 0xD8, 0xAE,
};

const unsigned char np_iv[] =
{
	0x9D, 0x6F, 0x9D, 0x00, 0xFD, 0xA5, 0xAB, 0x47, 0xAF, 0x80, 0xAF,
	0xA3, 0x6A, 0xA3, 0x57, 0xCB, 0xC6, 0xF6, 0xD4, 0x47, 0xC4, 0x79,
	0x36, 0xAD, 0x6D, 0xD6, 0x50, 0xBD, 0x81, 0xAB, 0x0B, 0x00,
};

const unsigned char np_pub[] =
{
	0x30, 0x4B, 0x03, 0x02, 0x07, 0x00, 0x02, 0x01, 0x20, 0x02, 0x20,
	0x35, 0xD7, 0xFC, 0x01, 0x98, 0x49, 0x25, 0xE0, 0x42, 0x9D, 0x8B,
	0x94, 0x53, 0xAE, 0xDC, 0x87, 0xAB, 0x07, 0x4F, 0xCE, 0x0E, 0xA0,
	0xD2, 0x65, 0x94, 0x24, 0xE8, 0x93, 0x17, 0x0F, 0x01, 0x6C, 0x02,
	0x20, 0x16, 0xC2, 0xE9, 0xBB, 0xDB, 0x4B, 0xD1, 0xC0, 0x52, 0x3A,
	0xFA, 0xE7, 0x3F, 0x7E, 0x6F, 0x0B, 0x0E, 0xCD, 0xE6, 0xAE, 0x35,
	0xA4, 0xCC, 0x59, 0xCC, 0x0C, 0x62, 0x6D, 0x65, 0x91, 0x70, 0xA0,
};

bool IsEncrypted(NPGetPublisherFileResult *File)
{
	return (File->buffer[0] == 0x11);
}

bool Decrypt(NPGetPublisherFileResult *File, unsigned char *OutBuffer)
{
	register_cipher(&aes_desc);
	ltc_mp = ltm_desc;

	int AES = find_cipher("aes");
	np_header Header;

	// Decrypt the header
	symmetric_CBC cbc;
	cbc_start(AES, np_iv, np_key, 32, 0, &cbc);
	cbc_decrypt(File->buffer, (unsigned char*)&Header, sizeof(Header), &cbc);
	cbc_done(&cbc);

	unsigned char  *pData = &File->buffer[sizeof(np_header)];
	unsigned int	pSize = File->fileSize - sizeof(np_header);

	// Hash encrypted data
	hash_state State;
	unsigned char Hash[32];

	sha256_init(&State);
	sha256_process(&State, pData, pSize);
	sha256_done(&State, Hash);

	// Validate signature
	ecc_key Key;
	int Result = NULL;

	ecc_import(np_pub, sizeof(np_pub), &Key);
	ecc_verify_hash(Header.sig, sizeof(Header.sig), Hash, sizeof(Hash), &Result, &Key);
	if (Result == 0) return false;

	// Decrypt data payload
	symmetric_CTR ctr;

	ctr_start(AES, Header.iv, Header.key, 16, 0, 0, &ctr);
	ctr_decrypt(pData, OutBuffer, pSize, &ctr);
	ctr_done(&ctr);

	return true;
}